//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.2032.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;
using System.Data;
using System.Xml;
using System.Runtime.Serialization;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="DCE3ScSoap", Namespace="http://tempuri.org/BolsaDCE/DCE3Sc")]
public class DCE3Sc : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public DCE3Sc() {
        this.Url = "http://www.mslatam.com/latam/msdn/comunidad/dce/bolsa/DCE3Sc.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BolsaDCE/DCE3Sc/EsUsuarioValido", RequestNamespace="http://tempuri.org/BolsaDCE/DCE3Sc", ResponseNamespace="http://tempuri.org/BolsaDCE/DCE3Sc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool EsUsuarioValido(string Usuario, string Clave) {
        object[] results = this.Invoke("EsUsuarioValido", new object[] {
                    Usuario,
                    Clave});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginEsUsuarioValido(string Usuario, string Clave, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("EsUsuarioValido", new object[] {
                    Usuario,
                    Clave}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndEsUsuarioValido(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BolsaDCE/DCE3Sc/GetCantidadEstrellas", RequestNamespace="http://tempuri.org/BolsaDCE/DCE3Sc", ResponseNamespace="http://tempuri.org/BolsaDCE/DCE3Sc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int GetCantidadEstrellas(string Usuario) {
        object[] results = this.Invoke("GetCantidadEstrellas", new object[] {
                    Usuario});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCantidadEstrellas(string Usuario, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCantidadEstrellas", new object[] {
                    Usuario}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndGetCantidadEstrellas(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BolsaDCE/DCE3Sc/GetPerfilUsuario", RequestNamespace="http://tempuri.org/BolsaDCE/DCE3Sc", ResponseNamespace="http://tempuri.org/BolsaDCE/DCE3Sc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public BolsaSC_Info GetPerfilUsuario(string Usuario) {
        object[] results = this.Invoke("GetPerfilUsuario", new object[] {
                    Usuario});
        return ((BolsaSC_Info)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPerfilUsuario(string Usuario, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPerfilUsuario", new object[] {
                    Usuario}, callback, asyncState);
    }
    
    /// <remarks/>
    public BolsaSC_Info EndGetPerfilUsuario(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((BolsaSC_Info)(results[0]));
    }
}

[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Diagnostics.DebuggerStepThrough()]
[System.ComponentModel.ToolboxItem(true)]
public class BolsaSC_Info : DataSet {
    
    private CategAppDataTable tableCategApp;
    
    private AppOtrasDataTable tableAppOtras;
    
    private LenguajesDataTable tableLenguajes;
    
    private LenguajesOtrosDataTable tableLenguajesOtros;
    
    private CategoriasDataTable tableCategorias;
    
    private CategoriasOtrasDataTable tableCategoriasOtras;
    
    private UsuarioDataTable tableUsuario;
    
    public BolsaSC_Info() {
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    protected BolsaSC_Info(SerializationInfo info, StreamingContext context) {
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((strSchema != null)) {
            DataSet ds = new DataSet();
            ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
            if ((ds.Tables["CategApp"] != null)) {
                this.Tables.Add(new CategAppDataTable(ds.Tables["CategApp"]));
            }
            if ((ds.Tables["AppOtras"] != null)) {
                this.Tables.Add(new AppOtrasDataTable(ds.Tables["AppOtras"]));
            }
            if ((ds.Tables["Lenguajes"] != null)) {
                this.Tables.Add(new LenguajesDataTable(ds.Tables["Lenguajes"]));
            }
            if ((ds.Tables["LenguajesOtros"] != null)) {
                this.Tables.Add(new LenguajesOtrosDataTable(ds.Tables["LenguajesOtros"]));
            }
            if ((ds.Tables["Categorias"] != null)) {
                this.Tables.Add(new CategoriasDataTable(ds.Tables["Categorias"]));
            }
            if ((ds.Tables["CategoriasOtras"] != null)) {
                this.Tables.Add(new CategoriasOtrasDataTable(ds.Tables["CategoriasOtras"]));
            }
            if ((ds.Tables["Usuario"] != null)) {
                this.Tables.Add(new UsuarioDataTable(ds.Tables["Usuario"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.InitClass();
        }
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CategAppDataTable CategApp {
        get {
            return this.tableCategApp;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public AppOtrasDataTable AppOtras {
        get {
            return this.tableAppOtras;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public LenguajesDataTable Lenguajes {
        get {
            return this.tableLenguajes;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public LenguajesOtrosDataTable LenguajesOtros {
        get {
            return this.tableLenguajesOtros;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CategoriasDataTable Categorias {
        get {
            return this.tableCategorias;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CategoriasOtrasDataTable CategoriasOtras {
        get {
            return this.tableCategoriasOtras;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public UsuarioDataTable Usuario {
        get {
            return this.tableUsuario;
        }
    }
    
    public override DataSet Clone() {
        BolsaSC_Info cln = ((BolsaSC_Info)(base.Clone()));
        cln.InitVars();
        return cln;
    }
    
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    protected override void ReadXmlSerializable(XmlReader reader) {
        this.Reset();
        DataSet ds = new DataSet();
        ds.ReadXml(reader);
        if ((ds.Tables["CategApp"] != null)) {
            this.Tables.Add(new CategAppDataTable(ds.Tables["CategApp"]));
        }
        if ((ds.Tables["AppOtras"] != null)) {
            this.Tables.Add(new AppOtrasDataTable(ds.Tables["AppOtras"]));
        }
        if ((ds.Tables["Lenguajes"] != null)) {
            this.Tables.Add(new LenguajesDataTable(ds.Tables["Lenguajes"]));
        }
        if ((ds.Tables["LenguajesOtros"] != null)) {
            this.Tables.Add(new LenguajesOtrosDataTable(ds.Tables["LenguajesOtros"]));
        }
        if ((ds.Tables["Categorias"] != null)) {
            this.Tables.Add(new CategoriasDataTable(ds.Tables["Categorias"]));
        }
        if ((ds.Tables["CategoriasOtras"] != null)) {
            this.Tables.Add(new CategoriasOtrasDataTable(ds.Tables["CategoriasOtras"]));
        }
        if ((ds.Tables["Usuario"] != null)) {
            this.Tables.Add(new UsuarioDataTable(ds.Tables["Usuario"]));
        }
        this.DataSetName = ds.DataSetName;
        this.Prefix = ds.Prefix;
        this.Namespace = ds.Namespace;
        this.Locale = ds.Locale;
        this.CaseSensitive = ds.CaseSensitive;
        this.EnforceConstraints = ds.EnforceConstraints;
        this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
        this.InitVars();
    }
    
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
    }
    
    internal void InitVars() {
        this.tableCategApp = ((CategAppDataTable)(this.Tables["CategApp"]));
        if ((this.tableCategApp != null)) {
            this.tableCategApp.InitVars();
        }
        this.tableAppOtras = ((AppOtrasDataTable)(this.Tables["AppOtras"]));
        if ((this.tableAppOtras != null)) {
            this.tableAppOtras.InitVars();
        }
        this.tableLenguajes = ((LenguajesDataTable)(this.Tables["Lenguajes"]));
        if ((this.tableLenguajes != null)) {
            this.tableLenguajes.InitVars();
        }
        this.tableLenguajesOtros = ((LenguajesOtrosDataTable)(this.Tables["LenguajesOtros"]));
        if ((this.tableLenguajesOtros != null)) {
            this.tableLenguajesOtros.InitVars();
        }
        this.tableCategorias = ((CategoriasDataTable)(this.Tables["Categorias"]));
        if ((this.tableCategorias != null)) {
            this.tableCategorias.InitVars();
        }
        this.tableCategoriasOtras = ((CategoriasOtrasDataTable)(this.Tables["CategoriasOtras"]));
        if ((this.tableCategoriasOtras != null)) {
            this.tableCategoriasOtras.InitVars();
        }
        this.tableUsuario = ((UsuarioDataTable)(this.Tables["Usuario"]));
        if ((this.tableUsuario != null)) {
            this.tableUsuario.InitVars();
        }
    }
    
    private void InitClass() {
        this.DataSetName = "BolsaSC_Info";
        this.Prefix = "";
        this.Namespace = "http://www.tempuri.org/BolsaSC_Info.xsd";
        this.Locale = new System.Globalization.CultureInfo("es-AR");
        this.CaseSensitive = false;
        this.EnforceConstraints = true;
        this.tableCategApp = new CategAppDataTable();
        this.Tables.Add(this.tableCategApp);
        this.tableAppOtras = new AppOtrasDataTable();
        this.Tables.Add(this.tableAppOtras);
        this.tableLenguajes = new LenguajesDataTable();
        this.Tables.Add(this.tableLenguajes);
        this.tableLenguajesOtros = new LenguajesOtrosDataTable();
        this.Tables.Add(this.tableLenguajesOtros);
        this.tableCategorias = new CategoriasDataTable();
        this.Tables.Add(this.tableCategorias);
        this.tableCategoriasOtras = new CategoriasOtrasDataTable();
        this.Tables.Add(this.tableCategoriasOtras);
        this.tableUsuario = new UsuarioDataTable();
        this.Tables.Add(this.tableUsuario);
    }
    
    private bool ShouldSerializeCategApp() {
        return false;
    }
    
    private bool ShouldSerializeAppOtras() {
        return false;
    }
    
    private bool ShouldSerializeLenguajes() {
        return false;
    }
    
    private bool ShouldSerializeLenguajesOtros() {
        return false;
    }
    
    private bool ShouldSerializeCategorias() {
        return false;
    }
    
    private bool ShouldSerializeCategoriasOtras() {
        return false;
    }
    
    private bool ShouldSerializeUsuario() {
        return false;
    }
    
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    public delegate void CategAppRowChangeEventHandler(object sender, CategAppRowChangeEvent e);
    
    public delegate void AppOtrasRowChangeEventHandler(object sender, AppOtrasRowChangeEvent e);
    
    public delegate void LenguajesRowChangeEventHandler(object sender, LenguajesRowChangeEvent e);
    
    public delegate void LenguajesOtrosRowChangeEventHandler(object sender, LenguajesOtrosRowChangeEvent e);
    
    public delegate void CategoriasRowChangeEventHandler(object sender, CategoriasRowChangeEvent e);
    
    public delegate void CategoriasOtrasRowChangeEventHandler(object sender, CategoriasOtrasRowChangeEvent e);
    
    public delegate void UsuarioRowChangeEventHandler(object sender, UsuarioRowChangeEvent e);
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategAppDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnAppCode;
        
        private DataColumn columnAppName;
        
        internal CategAppDataTable() : 
                base("CategApp") {
            this.InitClass();
        }
        
        internal CategAppDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn AppCodeColumn {
            get {
                return this.columnAppCode;
            }
        }
        
        internal DataColumn AppNameColumn {
            get {
                return this.columnAppName;
            }
        }
        
        public CategAppRow this[int index] {
            get {
                return ((CategAppRow)(this.Rows[index]));
            }
        }
        
        public event CategAppRowChangeEventHandler CategAppRowChanged;
        
        public event CategAppRowChangeEventHandler CategAppRowChanging;
        
        public event CategAppRowChangeEventHandler CategAppRowDeleted;
        
        public event CategAppRowChangeEventHandler CategAppRowDeleting;
        
        public void AddCategAppRow(CategAppRow row) {
            this.Rows.Add(row);
        }
        
        public CategAppRow AddCategAppRow(string AppName) {
            CategAppRow rowCategAppRow = ((CategAppRow)(this.NewRow()));
            rowCategAppRow.ItemArray = new object[] {
                    null,
                    AppName};
            this.Rows.Add(rowCategAppRow);
            return rowCategAppRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            CategAppDataTable cln = ((CategAppDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new CategAppDataTable();
        }
        
        internal void InitVars() {
            this.columnAppCode = this.Columns["AppCode"];
            this.columnAppName = this.Columns["AppName"];
        }
        
        private void InitClass() {
            this.columnAppCode = new DataColumn("AppCode", typeof(short), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnAppCode);
            this.columnAppName = new DataColumn("AppName", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnAppName);
            this.columnAppCode.AutoIncrement = true;
            this.columnAppCode.AllowDBNull = false;
            this.columnAppCode.ReadOnly = true;
        }
        
        public CategAppRow NewCategAppRow() {
            return ((CategAppRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new CategAppRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(CategAppRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CategAppRowChanged != null)) {
                this.CategAppRowChanged(this, new CategAppRowChangeEvent(((CategAppRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CategAppRowChanging != null)) {
                this.CategAppRowChanging(this, new CategAppRowChangeEvent(((CategAppRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CategAppRowDeleted != null)) {
                this.CategAppRowDeleted(this, new CategAppRowChangeEvent(((CategAppRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CategAppRowDeleting != null)) {
                this.CategAppRowDeleting(this, new CategAppRowChangeEvent(((CategAppRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveCategAppRow(CategAppRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategAppRow : DataRow {
        
        private CategAppDataTable tableCategApp;
        
        internal CategAppRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableCategApp = ((CategAppDataTable)(this.Table));
        }
        
        public short AppCode {
            get {
                return ((short)(this[this.tableCategApp.AppCodeColumn]));
            }
            set {
                this[this.tableCategApp.AppCodeColumn] = value;
            }
        }
        
        public string AppName {
            get {
                try {
                    return ((string)(this[this.tableCategApp.AppNameColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableCategApp.AppNameColumn] = value;
            }
        }
        
        public bool IsAppNameNull() {
            return this.IsNull(this.tableCategApp.AppNameColumn);
        }
        
        public void SetAppNameNull() {
            this[this.tableCategApp.AppNameColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategAppRowChangeEvent : EventArgs {
        
        private CategAppRow eventRow;
        
        private DataRowAction eventAction;
        
        public CategAppRowChangeEvent(CategAppRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public CategAppRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class AppOtrasDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnDevApplications;
        
        internal AppOtrasDataTable() : 
                base("AppOtras") {
            this.InitClass();
        }
        
        internal AppOtrasDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn DevApplicationsColumn {
            get {
                return this.columnDevApplications;
            }
        }
        
        public AppOtrasRow this[int index] {
            get {
                return ((AppOtrasRow)(this.Rows[index]));
            }
        }
        
        public event AppOtrasRowChangeEventHandler AppOtrasRowChanged;
        
        public event AppOtrasRowChangeEventHandler AppOtrasRowChanging;
        
        public event AppOtrasRowChangeEventHandler AppOtrasRowDeleted;
        
        public event AppOtrasRowChangeEventHandler AppOtrasRowDeleting;
        
        public void AddAppOtrasRow(AppOtrasRow row) {
            this.Rows.Add(row);
        }
        
        public AppOtrasRow AddAppOtrasRow(string DevApplications) {
            AppOtrasRow rowAppOtrasRow = ((AppOtrasRow)(this.NewRow()));
            rowAppOtrasRow.ItemArray = new object[] {
                    DevApplications};
            this.Rows.Add(rowAppOtrasRow);
            return rowAppOtrasRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            AppOtrasDataTable cln = ((AppOtrasDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new AppOtrasDataTable();
        }
        
        internal void InitVars() {
            this.columnDevApplications = this.Columns["DevApplications"];
        }
        
        private void InitClass() {
            this.columnDevApplications = new DataColumn("DevApplications", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnDevApplications);
        }
        
        public AppOtrasRow NewAppOtrasRow() {
            return ((AppOtrasRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new AppOtrasRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(AppOtrasRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.AppOtrasRowChanged != null)) {
                this.AppOtrasRowChanged(this, new AppOtrasRowChangeEvent(((AppOtrasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.AppOtrasRowChanging != null)) {
                this.AppOtrasRowChanging(this, new AppOtrasRowChangeEvent(((AppOtrasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.AppOtrasRowDeleted != null)) {
                this.AppOtrasRowDeleted(this, new AppOtrasRowChangeEvent(((AppOtrasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.AppOtrasRowDeleting != null)) {
                this.AppOtrasRowDeleting(this, new AppOtrasRowChangeEvent(((AppOtrasRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveAppOtrasRow(AppOtrasRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class AppOtrasRow : DataRow {
        
        private AppOtrasDataTable tableAppOtras;
        
        internal AppOtrasRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableAppOtras = ((AppOtrasDataTable)(this.Table));
        }
        
        public string DevApplications {
            get {
                try {
                    return ((string)(this[this.tableAppOtras.DevApplicationsColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableAppOtras.DevApplicationsColumn] = value;
            }
        }
        
        public bool IsDevApplicationsNull() {
            return this.IsNull(this.tableAppOtras.DevApplicationsColumn);
        }
        
        public void SetDevApplicationsNull() {
            this[this.tableAppOtras.DevApplicationsColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class AppOtrasRowChangeEvent : EventArgs {
        
        private AppOtrasRow eventRow;
        
        private DataRowAction eventAction;
        
        public AppOtrasRowChangeEvent(AppOtrasRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public AppOtrasRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class LenguajesDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnLangcode;
        
        private DataColumn columnLangName;
        
        internal LenguajesDataTable() : 
                base("Lenguajes") {
            this.InitClass();
        }
        
        internal LenguajesDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn LangcodeColumn {
            get {
                return this.columnLangcode;
            }
        }
        
        internal DataColumn LangNameColumn {
            get {
                return this.columnLangName;
            }
        }
        
        public LenguajesRow this[int index] {
            get {
                return ((LenguajesRow)(this.Rows[index]));
            }
        }
        
        public event LenguajesRowChangeEventHandler LenguajesRowChanged;
        
        public event LenguajesRowChangeEventHandler LenguajesRowChanging;
        
        public event LenguajesRowChangeEventHandler LenguajesRowDeleted;
        
        public event LenguajesRowChangeEventHandler LenguajesRowDeleting;
        
        public void AddLenguajesRow(LenguajesRow row) {
            this.Rows.Add(row);
        }
        
        public LenguajesRow AddLenguajesRow(string LangName) {
            LenguajesRow rowLenguajesRow = ((LenguajesRow)(this.NewRow()));
            rowLenguajesRow.ItemArray = new object[] {
                    null,
                    LangName};
            this.Rows.Add(rowLenguajesRow);
            return rowLenguajesRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            LenguajesDataTable cln = ((LenguajesDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new LenguajesDataTable();
        }
        
        internal void InitVars() {
            this.columnLangcode = this.Columns["Langcode"];
            this.columnLangName = this.Columns["LangName"];
        }
        
        private void InitClass() {
            this.columnLangcode = new DataColumn("Langcode", typeof(int), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnLangcode);
            this.columnLangName = new DataColumn("LangName", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnLangName);
            this.columnLangcode.AutoIncrement = true;
            this.columnLangcode.AllowDBNull = false;
            this.columnLangcode.ReadOnly = true;
        }
        
        public LenguajesRow NewLenguajesRow() {
            return ((LenguajesRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new LenguajesRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(LenguajesRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.LenguajesRowChanged != null)) {
                this.LenguajesRowChanged(this, new LenguajesRowChangeEvent(((LenguajesRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.LenguajesRowChanging != null)) {
                this.LenguajesRowChanging(this, new LenguajesRowChangeEvent(((LenguajesRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.LenguajesRowDeleted != null)) {
                this.LenguajesRowDeleted(this, new LenguajesRowChangeEvent(((LenguajesRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.LenguajesRowDeleting != null)) {
                this.LenguajesRowDeleting(this, new LenguajesRowChangeEvent(((LenguajesRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveLenguajesRow(LenguajesRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class LenguajesRow : DataRow {
        
        private LenguajesDataTable tableLenguajes;
        
        internal LenguajesRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableLenguajes = ((LenguajesDataTable)(this.Table));
        }
        
        public int Langcode {
            get {
                return ((int)(this[this.tableLenguajes.LangcodeColumn]));
            }
            set {
                this[this.tableLenguajes.LangcodeColumn] = value;
            }
        }
        
        public string LangName {
            get {
                try {
                    return ((string)(this[this.tableLenguajes.LangNameColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableLenguajes.LangNameColumn] = value;
            }
        }
        
        public bool IsLangNameNull() {
            return this.IsNull(this.tableLenguajes.LangNameColumn);
        }
        
        public void SetLangNameNull() {
            this[this.tableLenguajes.LangNameColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class LenguajesRowChangeEvent : EventArgs {
        
        private LenguajesRow eventRow;
        
        private DataRowAction eventAction;
        
        public LenguajesRowChangeEvent(LenguajesRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public LenguajesRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class LenguajesOtrosDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnLanguages;
        
        internal LenguajesOtrosDataTable() : 
                base("LenguajesOtros") {
            this.InitClass();
        }
        
        internal LenguajesOtrosDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn LanguagesColumn {
            get {
                return this.columnLanguages;
            }
        }
        
        public LenguajesOtrosRow this[int index] {
            get {
                return ((LenguajesOtrosRow)(this.Rows[index]));
            }
        }
        
        public event LenguajesOtrosRowChangeEventHandler LenguajesOtrosRowChanged;
        
        public event LenguajesOtrosRowChangeEventHandler LenguajesOtrosRowChanging;
        
        public event LenguajesOtrosRowChangeEventHandler LenguajesOtrosRowDeleted;
        
        public event LenguajesOtrosRowChangeEventHandler LenguajesOtrosRowDeleting;
        
        public void AddLenguajesOtrosRow(LenguajesOtrosRow row) {
            this.Rows.Add(row);
        }
        
        public LenguajesOtrosRow AddLenguajesOtrosRow(string Languages) {
            LenguajesOtrosRow rowLenguajesOtrosRow = ((LenguajesOtrosRow)(this.NewRow()));
            rowLenguajesOtrosRow.ItemArray = new object[] {
                    Languages};
            this.Rows.Add(rowLenguajesOtrosRow);
            return rowLenguajesOtrosRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            LenguajesOtrosDataTable cln = ((LenguajesOtrosDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new LenguajesOtrosDataTable();
        }
        
        internal void InitVars() {
            this.columnLanguages = this.Columns["Languages"];
        }
        
        private void InitClass() {
            this.columnLanguages = new DataColumn("Languages", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnLanguages);
        }
        
        public LenguajesOtrosRow NewLenguajesOtrosRow() {
            return ((LenguajesOtrosRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new LenguajesOtrosRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(LenguajesOtrosRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.LenguajesOtrosRowChanged != null)) {
                this.LenguajesOtrosRowChanged(this, new LenguajesOtrosRowChangeEvent(((LenguajesOtrosRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.LenguajesOtrosRowChanging != null)) {
                this.LenguajesOtrosRowChanging(this, new LenguajesOtrosRowChangeEvent(((LenguajesOtrosRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.LenguajesOtrosRowDeleted != null)) {
                this.LenguajesOtrosRowDeleted(this, new LenguajesOtrosRowChangeEvent(((LenguajesOtrosRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.LenguajesOtrosRowDeleting != null)) {
                this.LenguajesOtrosRowDeleting(this, new LenguajesOtrosRowChangeEvent(((LenguajesOtrosRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveLenguajesOtrosRow(LenguajesOtrosRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class LenguajesOtrosRow : DataRow {
        
        private LenguajesOtrosDataTable tableLenguajesOtros;
        
        internal LenguajesOtrosRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableLenguajesOtros = ((LenguajesOtrosDataTable)(this.Table));
        }
        
        public string Languages {
            get {
                try {
                    return ((string)(this[this.tableLenguajesOtros.LanguagesColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableLenguajesOtros.LanguagesColumn] = value;
            }
        }
        
        public bool IsLanguagesNull() {
            return this.IsNull(this.tableLenguajesOtros.LanguagesColumn);
        }
        
        public void SetLanguagesNull() {
            this[this.tableLenguajesOtros.LanguagesColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class LenguajesOtrosRowChangeEvent : EventArgs {
        
        private LenguajesOtrosRow eventRow;
        
        private DataRowAction eventAction;
        
        public LenguajesOtrosRowChangeEvent(LenguajesOtrosRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public LenguajesOtrosRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategoriasDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnCategoryID;
        
        private DataColumn columnName;
        
        internal CategoriasDataTable() : 
                base("Categorias") {
            this.InitClass();
        }
        
        internal CategoriasDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn CategoryIDColumn {
            get {
                return this.columnCategoryID;
            }
        }
        
        internal DataColumn NameColumn {
            get {
                return this.columnName;
            }
        }
        
        public CategoriasRow this[int index] {
            get {
                return ((CategoriasRow)(this.Rows[index]));
            }
        }
        
        public event CategoriasRowChangeEventHandler CategoriasRowChanged;
        
        public event CategoriasRowChangeEventHandler CategoriasRowChanging;
        
        public event CategoriasRowChangeEventHandler CategoriasRowDeleted;
        
        public event CategoriasRowChangeEventHandler CategoriasRowDeleting;
        
        public void AddCategoriasRow(CategoriasRow row) {
            this.Rows.Add(row);
        }
        
        public CategoriasRow AddCategoriasRow(string Name) {
            CategoriasRow rowCategoriasRow = ((CategoriasRow)(this.NewRow()));
            rowCategoriasRow.ItemArray = new object[] {
                    null,
                    Name};
            this.Rows.Add(rowCategoriasRow);
            return rowCategoriasRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            CategoriasDataTable cln = ((CategoriasDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new CategoriasDataTable();
        }
        
        internal void InitVars() {
            this.columnCategoryID = this.Columns["CategoryID"];
            this.columnName = this.Columns["Name"];
        }
        
        private void InitClass() {
            this.columnCategoryID = new DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnCategoryID);
            this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnName);
            this.columnCategoryID.AutoIncrement = true;
            this.columnCategoryID.AllowDBNull = false;
            this.columnCategoryID.ReadOnly = true;
        }
        
        public CategoriasRow NewCategoriasRow() {
            return ((CategoriasRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new CategoriasRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(CategoriasRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CategoriasRowChanged != null)) {
                this.CategoriasRowChanged(this, new CategoriasRowChangeEvent(((CategoriasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CategoriasRowChanging != null)) {
                this.CategoriasRowChanging(this, new CategoriasRowChangeEvent(((CategoriasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CategoriasRowDeleted != null)) {
                this.CategoriasRowDeleted(this, new CategoriasRowChangeEvent(((CategoriasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CategoriasRowDeleting != null)) {
                this.CategoriasRowDeleting(this, new CategoriasRowChangeEvent(((CategoriasRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveCategoriasRow(CategoriasRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategoriasRow : DataRow {
        
        private CategoriasDataTable tableCategorias;
        
        internal CategoriasRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableCategorias = ((CategoriasDataTable)(this.Table));
        }
        
        public int CategoryID {
            get {
                return ((int)(this[this.tableCategorias.CategoryIDColumn]));
            }
            set {
                this[this.tableCategorias.CategoryIDColumn] = value;
            }
        }
        
        public string Name {
            get {
                try {
                    return ((string)(this[this.tableCategorias.NameColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableCategorias.NameColumn] = value;
            }
        }
        
        public bool IsNameNull() {
            return this.IsNull(this.tableCategorias.NameColumn);
        }
        
        public void SetNameNull() {
            this[this.tableCategorias.NameColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategoriasRowChangeEvent : EventArgs {
        
        private CategoriasRow eventRow;
        
        private DataRowAction eventAction;
        
        public CategoriasRowChangeEvent(CategoriasRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public CategoriasRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategoriasOtrasDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnDevCategories;
        
        internal CategoriasOtrasDataTable() : 
                base("CategoriasOtras") {
            this.InitClass();
        }
        
        internal CategoriasOtrasDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn DevCategoriesColumn {
            get {
                return this.columnDevCategories;
            }
        }
        
        public CategoriasOtrasRow this[int index] {
            get {
                return ((CategoriasOtrasRow)(this.Rows[index]));
            }
        }
        
        public event CategoriasOtrasRowChangeEventHandler CategoriasOtrasRowChanged;
        
        public event CategoriasOtrasRowChangeEventHandler CategoriasOtrasRowChanging;
        
        public event CategoriasOtrasRowChangeEventHandler CategoriasOtrasRowDeleted;
        
        public event CategoriasOtrasRowChangeEventHandler CategoriasOtrasRowDeleting;
        
        public void AddCategoriasOtrasRow(CategoriasOtrasRow row) {
            this.Rows.Add(row);
        }
        
        public CategoriasOtrasRow AddCategoriasOtrasRow(string DevCategories) {
            CategoriasOtrasRow rowCategoriasOtrasRow = ((CategoriasOtrasRow)(this.NewRow()));
            rowCategoriasOtrasRow.ItemArray = new object[] {
                    DevCategories};
            this.Rows.Add(rowCategoriasOtrasRow);
            return rowCategoriasOtrasRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            CategoriasOtrasDataTable cln = ((CategoriasOtrasDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new CategoriasOtrasDataTable();
        }
        
        internal void InitVars() {
            this.columnDevCategories = this.Columns["DevCategories"];
        }
        
        private void InitClass() {
            this.columnDevCategories = new DataColumn("DevCategories", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnDevCategories);
        }
        
        public CategoriasOtrasRow NewCategoriasOtrasRow() {
            return ((CategoriasOtrasRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new CategoriasOtrasRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(CategoriasOtrasRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CategoriasOtrasRowChanged != null)) {
                this.CategoriasOtrasRowChanged(this, new CategoriasOtrasRowChangeEvent(((CategoriasOtrasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CategoriasOtrasRowChanging != null)) {
                this.CategoriasOtrasRowChanging(this, new CategoriasOtrasRowChangeEvent(((CategoriasOtrasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CategoriasOtrasRowDeleted != null)) {
                this.CategoriasOtrasRowDeleted(this, new CategoriasOtrasRowChangeEvent(((CategoriasOtrasRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CategoriasOtrasRowDeleting != null)) {
                this.CategoriasOtrasRowDeleting(this, new CategoriasOtrasRowChangeEvent(((CategoriasOtrasRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveCategoriasOtrasRow(CategoriasOtrasRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategoriasOtrasRow : DataRow {
        
        private CategoriasOtrasDataTable tableCategoriasOtras;
        
        internal CategoriasOtrasRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableCategoriasOtras = ((CategoriasOtrasDataTable)(this.Table));
        }
        
        public string DevCategories {
            get {
                try {
                    return ((string)(this[this.tableCategoriasOtras.DevCategoriesColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableCategoriasOtras.DevCategoriesColumn] = value;
            }
        }
        
        public bool IsDevCategoriesNull() {
            return this.IsNull(this.tableCategoriasOtras.DevCategoriesColumn);
        }
        
        public void SetDevCategoriesNull() {
            this[this.tableCategoriasOtras.DevCategoriesColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class CategoriasOtrasRowChangeEvent : EventArgs {
        
        private CategoriasOtrasRow eventRow;
        
        private DataRowAction eventAction;
        
        public CategoriasOtrasRowChangeEvent(CategoriasOtrasRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public CategoriasOtrasRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class UsuarioDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnNombre;
        
        private DataColumn columnCalle;
        
        private DataColumn columnCiudad;
        
        private DataColumn columnProvincia;
        
        private DataColumn columnCodPais;
        
        private DataColumn columnPais;
        
        internal UsuarioDataTable() : 
                base("Usuario") {
            this.InitClass();
        }
        
        internal UsuarioDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn NombreColumn {
            get {
                return this.columnNombre;
            }
        }
        
        internal DataColumn CalleColumn {
            get {
                return this.columnCalle;
            }
        }
        
        internal DataColumn CiudadColumn {
            get {
                return this.columnCiudad;
            }
        }
        
        internal DataColumn ProvinciaColumn {
            get {
                return this.columnProvincia;
            }
        }
        
        internal DataColumn CodPaisColumn {
            get {
                return this.columnCodPais;
            }
        }
        
        internal DataColumn PaisColumn {
            get {
                return this.columnPais;
            }
        }
        
        public UsuarioRow this[int index] {
            get {
                return ((UsuarioRow)(this.Rows[index]));
            }
        }
        
        public event UsuarioRowChangeEventHandler UsuarioRowChanged;
        
        public event UsuarioRowChangeEventHandler UsuarioRowChanging;
        
        public event UsuarioRowChangeEventHandler UsuarioRowDeleted;
        
        public event UsuarioRowChangeEventHandler UsuarioRowDeleting;
        
        public void AddUsuarioRow(UsuarioRow row) {
            this.Rows.Add(row);
        }
        
        public UsuarioRow AddUsuarioRow(string Nombre, string Calle, string Ciudad, string Provincia, string CodPais, string Pais) {
            UsuarioRow rowUsuarioRow = ((UsuarioRow)(this.NewRow()));
            rowUsuarioRow.ItemArray = new object[] {
                    Nombre,
                    Calle,
                    Ciudad,
                    Provincia,
                    CodPais,
                    Pais};
            this.Rows.Add(rowUsuarioRow);
            return rowUsuarioRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            UsuarioDataTable cln = ((UsuarioDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new UsuarioDataTable();
        }
        
        internal void InitVars() {
            this.columnNombre = this.Columns["Nombre"];
            this.columnCalle = this.Columns["Calle"];
            this.columnCiudad = this.Columns["Ciudad"];
            this.columnProvincia = this.Columns["Provincia"];
            this.columnCodPais = this.Columns["CodPais"];
            this.columnPais = this.Columns["Pais"];
        }
        
        private void InitClass() {
            this.columnNombre = new DataColumn("Nombre", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnNombre);
            this.columnCalle = new DataColumn("Calle", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnCalle);
            this.columnCiudad = new DataColumn("Ciudad", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnCiudad);
            this.columnProvincia = new DataColumn("Provincia", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnProvincia);
            this.columnCodPais = new DataColumn("CodPais", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnCodPais);
            this.columnPais = new DataColumn("Pais", typeof(string), null, System.Data.MappingType.Element);
            this.Columns.Add(this.columnPais);
        }
        
        public UsuarioRow NewUsuarioRow() {
            return ((UsuarioRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new UsuarioRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(UsuarioRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.UsuarioRowChanged != null)) {
                this.UsuarioRowChanged(this, new UsuarioRowChangeEvent(((UsuarioRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.UsuarioRowChanging != null)) {
                this.UsuarioRowChanging(this, new UsuarioRowChangeEvent(((UsuarioRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.UsuarioRowDeleted != null)) {
                this.UsuarioRowDeleted(this, new UsuarioRowChangeEvent(((UsuarioRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.UsuarioRowDeleting != null)) {
                this.UsuarioRowDeleting(this, new UsuarioRowChangeEvent(((UsuarioRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveUsuarioRow(UsuarioRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class UsuarioRow : DataRow {
        
        private UsuarioDataTable tableUsuario;
        
        internal UsuarioRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableUsuario = ((UsuarioDataTable)(this.Table));
        }
        
        public string Nombre {
            get {
                try {
                    return ((string)(this[this.tableUsuario.NombreColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUsuario.NombreColumn] = value;
            }
        }
        
        public string Calle {
            get {
                try {
                    return ((string)(this[this.tableUsuario.CalleColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUsuario.CalleColumn] = value;
            }
        }
        
        public string Ciudad {
            get {
                try {
                    return ((string)(this[this.tableUsuario.CiudadColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUsuario.CiudadColumn] = value;
            }
        }
        
        public string Provincia {
            get {
                try {
                    return ((string)(this[this.tableUsuario.ProvinciaColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUsuario.ProvinciaColumn] = value;
            }
        }
        
        public string CodPais {
            get {
                try {
                    return ((string)(this[this.tableUsuario.CodPaisColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUsuario.CodPaisColumn] = value;
            }
        }
        
        public string Pais {
            get {
                try {
                    return ((string)(this[this.tableUsuario.PaisColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUsuario.PaisColumn] = value;
            }
        }
        
        public bool IsNombreNull() {
            return this.IsNull(this.tableUsuario.NombreColumn);
        }
        
        public void SetNombreNull() {
            this[this.tableUsuario.NombreColumn] = System.Convert.DBNull;
        }
        
        public bool IsCalleNull() {
            return this.IsNull(this.tableUsuario.CalleColumn);
        }
        
        public void SetCalleNull() {
            this[this.tableUsuario.CalleColumn] = System.Convert.DBNull;
        }
        
        public bool IsCiudadNull() {
            return this.IsNull(this.tableUsuario.CiudadColumn);
        }
        
        public void SetCiudadNull() {
            this[this.tableUsuario.CiudadColumn] = System.Convert.DBNull;
        }
        
        public bool IsProvinciaNull() {
            return this.IsNull(this.tableUsuario.ProvinciaColumn);
        }
        
        public void SetProvinciaNull() {
            this[this.tableUsuario.ProvinciaColumn] = System.Convert.DBNull;
        }
        
        public bool IsCodPaisNull() {
            return this.IsNull(this.tableUsuario.CodPaisColumn);
        }
        
        public void SetCodPaisNull() {
            this[this.tableUsuario.CodPaisColumn] = System.Convert.DBNull;
        }
        
        public bool IsPaisNull() {
            return this.IsNull(this.tableUsuario.PaisColumn);
        }
        
        public void SetPaisNull() {
            this[this.tableUsuario.PaisColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class UsuarioRowChangeEvent : EventArgs {
        
        private UsuarioRow eventRow;
        
        private DataRowAction eventAction;
        
        public UsuarioRowChangeEvent(UsuarioRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public UsuarioRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
