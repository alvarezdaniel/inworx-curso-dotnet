//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.2914.16
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Woodgrove {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class AccountDataSet : System.Data.DataSet {
        
        private _GetAccountDataTable table_GetAccount;
        
        public AccountDataSet() {
            this.InitClass();
        }
        
        private AccountDataSet(SerializationInfo info, StreamingContext context) {
            this.InitClass();
            this.GetSerializationData(info, context);
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _GetAccountDataTable _GetAccount {
            get {
                return this.table_GetAccount;
            }
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.ReadXml(reader, XmlReadMode.IgnoreSchema);
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        private void InitClass() {
            this.DataSetName = "AccountDataSet";
            this.Namespace = "http://www.tempuri.org/AccountDataSet.xsd";
            this.table_GetAccount = new _GetAccountDataTable();
            this.Tables.Add(this.table_GetAccount);
        }
        
        private bool ShouldSerialize_GetAccount() {
            return false;
        }
        
        public delegate void _GetAccountRowChangeEventHandler(object sender, _GetAccountRowChangeEvent e);
        
        public class _GetAccountDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAccountID;
            
            private DataColumn columnCustomerID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnBalance;
            
            private DataColumn columnLastTransactionDate;
            
            private DataColumn columnType;
            
            private DataColumn columnInterestRate;
            
            private DataColumn columnMinimumBalance;
            
            internal _GetAccountDataTable() : 
                    base("_GetAccount") {
                this.InitClass();
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            internal DataColumn LastTransactionDateColumn {
                get {
                    return this.columnLastTransactionDate;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn InterestRateColumn {
                get {
                    return this.columnInterestRate;
                }
            }
            
            internal DataColumn MinimumBalanceColumn {
                get {
                    return this.columnMinimumBalance;
                }
            }
            
            public _GetAccountRow this[int index] {
                get {
                    return ((_GetAccountRow)(this.Rows[index]));
                }
            }
            
            public event _GetAccountRowChangeEventHandler _GetAccountRowChanged;
            
            public event _GetAccountRowChangeEventHandler _GetAccountRowChanging;
            
            public event _GetAccountRowChangeEventHandler _GetAccountRowDeleted;
            
            public event _GetAccountRowChangeEventHandler _GetAccountRowDeleting;
            
            public void Add_GetAccountRow(_GetAccountRow row) {
                this.Rows.Add(row);
            }
            
            public _GetAccountRow Add_GetAccountRow(int CustomerID, string Description, System.Decimal Balance, System.DateTime LastTransactionDate, string Type, System.Decimal InterestRate, System.Decimal MinimumBalance) {
                _GetAccountRow row_GetAccountRow = ((_GetAccountRow)(this.NewRow()));
                row_GetAccountRow.ItemArray = new object[] {
                        null,
                        CustomerID,
                        Description,
                        Balance,
                        LastTransactionDate,
                        Type,
                        InterestRate,
                        MinimumBalance};
                this.Rows.Add(row_GetAccountRow);
                return row_GetAccountRow;
            }
            
            public _GetAccountRow FindByAccountID(int AccountID) {
                return ((_GetAccountRow)(this.Rows.Find(new object[] {
                            AccountID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            private void InitClass() {
                this.columnAccountID = new DataColumn("AccountID", typeof(int), "", System.Data.MappingType.Element);
                this.columnAccountID.AutoIncrement = true;
                this.columnAccountID.AllowDBNull = false;
                this.columnAccountID.ReadOnly = true;
                this.columnAccountID.Unique = true;
                this.Columns.Add(this.columnAccountID);
                this.columnCustomerID = new DataColumn("CustomerID", typeof(int), "", System.Data.MappingType.Element);
                this.columnCustomerID.AllowDBNull = false;
                this.Columns.Add(this.columnCustomerID);
                this.columnDescription = new DataColumn("Description", typeof(string), "", System.Data.MappingType.Element);
                this.columnDescription.AllowDBNull = false;
                this.Columns.Add(this.columnDescription);
                this.columnBalance = new DataColumn("Balance", typeof(System.Decimal), "", System.Data.MappingType.Element);
                this.columnBalance.AllowDBNull = false;
                this.Columns.Add(this.columnBalance);
                this.columnLastTransactionDate = new DataColumn("LastTransactionDate", typeof(System.DateTime), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastTransactionDate);
                this.columnType = new DataColumn("Type", typeof(string), "", System.Data.MappingType.Element);
                this.columnType.AllowDBNull = false;
                this.Columns.Add(this.columnType);
                this.columnInterestRate = new DataColumn("InterestRate", typeof(System.Decimal), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnInterestRate);
                this.columnMinimumBalance = new DataColumn("MinimumBalance", typeof(System.Decimal), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnMinimumBalance);
                this.PrimaryKey = new DataColumn[] {
                        this.columnAccountID};
            }
            
            public _GetAccountRow New_GetAccountRow() {
                return ((_GetAccountRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                // We need to ensure that all Rows in the tabled are typed rows.
                // Table calls newRow whenever it needs to create a row.
                // So the following conditions are covered by Row newRow(Record record)
                // * Cursor calls table.addRecord(record) 
                // * table.addRow(object[] values) calls newRow(record)    
                return new _GetAccountRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(_GetAccountRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._GetAccountRowChanged != null)) {
                    this._GetAccountRowChanged(this, new _GetAccountRowChangeEvent(((_GetAccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._GetAccountRowChanging != null)) {
                    this._GetAccountRowChanging(this, new _GetAccountRowChangeEvent(((_GetAccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._GetAccountRowDeleted != null)) {
                    this._GetAccountRowDeleted(this, new _GetAccountRowChangeEvent(((_GetAccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._GetAccountRowDeleting != null)) {
                    this._GetAccountRowDeleting(this, new _GetAccountRowChangeEvent(((_GetAccountRow)(e.Row)), e.Action));
                }
            }
            
            public void Remove_GetAccountRow(_GetAccountRow row) {
                this.Rows.Remove(row);
            }
        }
        
        public class _GetAccountRow : DataRow {
            
            private _GetAccountDataTable table_GetAccount;
            
            internal _GetAccountRow(DataRowBuilder rb) : 
                    base(rb) {
                this.table_GetAccount = ((_GetAccountDataTable)(this.Table));
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.table_GetAccount.AccountIDColumn]));
                }
                set {
                    this[this.table_GetAccount.AccountIDColumn] = value;
                }
            }
            
            public int CustomerID {
                get {
                    return ((int)(this[this.table_GetAccount.CustomerIDColumn]));
                }
                set {
                    this[this.table_GetAccount.CustomerIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.table_GetAccount.DescriptionColumn]));
                }
                set {
                    this[this.table_GetAccount.DescriptionColumn] = value;
                }
            }
            
            public System.Decimal Balance {
                get {
                    return ((System.Decimal)(this[this.table_GetAccount.BalanceColumn]));
                }
                set {
                    this[this.table_GetAccount.BalanceColumn] = value;
                }
            }
            
            public System.DateTime LastTransactionDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.table_GetAccount.LastTransactionDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_GetAccount.LastTransactionDateColumn] = value;
                }
            }
            
            public string Type {
                get {
                    return ((string)(this[this.table_GetAccount.TypeColumn]));
                }
                set {
                    this[this.table_GetAccount.TypeColumn] = value;
                }
            }
            
            public System.Decimal InterestRate {
                get {
                    try {
                        return ((System.Decimal)(this[this.table_GetAccount.InterestRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_GetAccount.InterestRateColumn] = value;
                }
            }
            
            public System.Decimal MinimumBalance {
                get {
                    try {
                        return ((System.Decimal)(this[this.table_GetAccount.MinimumBalanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_GetAccount.MinimumBalanceColumn] = value;
                }
            }
            
            public bool IsLastTransactionDateNull() {
                return this.IsNull(this.table_GetAccount.LastTransactionDateColumn);
            }
            
            public void SetLastTransactionDateNull() {
                this[this.table_GetAccount.LastTransactionDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsInterestRateNull() {
                return this.IsNull(this.table_GetAccount.InterestRateColumn);
            }
            
            public void SetInterestRateNull() {
                this[this.table_GetAccount.InterestRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsMinimumBalanceNull() {
                return this.IsNull(this.table_GetAccount.MinimumBalanceColumn);
            }
            
            public void SetMinimumBalanceNull() {
                this[this.table_GetAccount.MinimumBalanceColumn] = System.Convert.DBNull;
            }
        }
        
        public class _GetAccountRowChangeEvent : EventArgs {
            
            private _GetAccountRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public _GetAccountRowChangeEvent(_GetAccountRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public _GetAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
